{"version":3,"sources":["Components/SubnetDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["SubnetDisplay","componentDidMount","setUpListeners","componentDidUpdate","cy","layout","name","animate","run","nodes","style","bind","event","console","log","target","data","label","props","OPlinkfun","elements","CytoscapeComponent","normalizeElements","this","state","width","w","height","h","Component","App","node_attrs","adj_list","clusters","dummy_data","core","selected","CyState","useState","query","updateQuery","details","showDetails","cyState","setCyState","subnetTitle","setSubnetTitle","OPlink","setOPlink","nodeResults","Fuse","keys","includeScore","search","limit","map","node","item","getDetails","cluster","Number","isInteger","clust_name","toString","jstree_go_data","clusterButton","onClick","cytoscape","updateCyState","Container","fixed","Grid","container","href","backgroundColor","xs","className","type","value","onChange","currentTarget","node_label","node_type","cluster_button","degree","firstNeighNodes","secondNeighb","targetNode","obj","source","targetSecondNode","nodeAttrs","secondNodesAttrs","secondNode","id","push","graph","edges","flat","align","treeData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e060dac.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport CytoscapeComponent from 'react-cytoscapejs'\n\nexport default class SubnetDisplay extends Component {\n  \n  componentDidMount = () => {\n    /*this.setState({\n      w: window.innerWidth,\n      h: window.innerHeight\n    })*/\n    this.setUpListeners()\n  }\n\n  componentDidUpdate = () => {\n    const layout = {name: 'cose', animate: false};\n    this.cy.layout(layout).run()\n    this.cy.nodes('[tt_type = \"alt\"]').style('background-color', '#d81159')\n    this.cy.nodes('[node_type = \"alt-prey\"]').style('background-color', '#d81159')\n    this.cy.nodes('[node_type = \"ref-prey\"]').style('background-color', '#2582c6')\n    this.cy.nodes('[node_type = \"ref-bait\"]').style('background-color', '#2535c6')\n\n  }\n\n  setUpListeners = () => {\n    this.cy.bind('click', 'node', (event) => {\n      console.log(event.target.data().label)\n      //<a href='https.openprot.org'>{prot_acc}</a>\n      this.props.OPlinkfun(event.target.data().label)\n    })\n  }\n\n  render() {\n    return(\n      <div>\n        <CytoscapeComponent\n            elements={CytoscapeComponent.normalizeElements(this.props.state.elements)}\n            style={{ width: this.props.state.w, height: this.props.state.h }}\n            cy={(cy) => {this.cy = cy}}\n        />\n      </div>\n    )\n  }\n}","import React, { useState } from 'react';\nimport { Grid, Container } from '@material-ui/core';\nimport * as data from './data/nodes_clusters.json';\nimport Fuse from 'fuse.js';\nimport TreeView from 'react-simple-jstree';\nimport SubnetDisplay from './Components/SubnetDisplay';\n\nfunction App(){\n  const nodes = data.nodes\n  const node_attrs = data.node_attrs\n  const adj_list = data.adj_list\n  const clusters = data.clusters\n  const dummy_data = {\n    data: {\n      core: {\n        data: [\n          {\n\n          }\n        ]\n      }\n    },\n    selected: [],\n  };\n\n  const CyState = {\n    w: 800,\n    h: 500,\n    elements : []\n  }\n\n  const [query, updateQuery] = useState('');\n  const [details, showDetails] = useState(dummy_data);\n  const [cyState, setCyState] = useState(CyState);\n  const [subnetTitle, setSubnetTitle] = useState('');\n  const [OPlink, setOPlink] = useState('');\n\n  const fuse = new Fuse(nodes, {\n    keys: [\n      'node_label',\n      'clust_go',\n      'node_type',\n    ],\n    includeScore: true\n  })\n\n  const results = fuse.search(query, {limit: 30})\n  const nodeResults = results.map(node => node.item);\n\n  function onSearch({ currentTarget }) {\n    updateQuery(currentTarget.value);\n  }\n\n  function updateCyState(cluster) {\n    const clust_name = \"cluster#\"+cluster.toString()\n    const data = clusters[clust_name].cytoscape\n\n    CyState.elements = data.elements\n    setCyState(CyState);\n  }\n\n  function secondNeighb(node) {\n    const firstNeighNodes = adj_list[node]\n\n    const firstNeighb = firstNeighNodes.map(targetNode => {\n      let obj = {}\n      obj[\"data\"] = {source: node, target: targetNode}\n      return obj\n    })\n    const secondNeighb = firstNeighNodes.map(targetNode => {\n      const secondNeighNodes = adj_list[targetNode]\n      let secondNeighb = secondNeighNodes.map(targetSecondNode => {\n        let obj = {}\n        obj[\"data\"] = {source: targetNode, target: targetSecondNode}\n        return obj\n      })\n      return secondNeighb\n    })\n    const nodeAttrs = firstNeighNodes.map(targetNode => {\n      const secondNeighNodes = adj_list[targetNode]\n      let secondNodesAttrs = secondNeighNodes.map(secondNode => {\n        let obj = {}\n        obj[\"data\"] = {label: secondNode, node_type:node_attrs[secondNode][\"node_type\"], id: secondNode}\n        return obj\n      })\n      secondNodesAttrs.push({data: {label: targetNode, node_type: node_attrs[targetNode][\"node_type\"], id: targetNode}})\n      return secondNodesAttrs\n    })\n    nodeAttrs.push({data: {label: node, node_type: node_attrs[node][\"node_type\"], id: node}})\n\n    const graph = {\n      edges:secondNeighb.flat(1),\n      nodes:nodeAttrs.flat(1)\n    }\n\n    CyState.elements = graph\n    setCyState(CyState);\n  }\n\n  function getDetails(cluster) {\n    if (! Number.isInteger(cluster)){\n      showDetails(dummy_data);\n      const title =  \"second neighborhood \" + cluster\n      setSubnetTitle(title);\n    } else {\n      const clust_name = \"cluster#\"+cluster.toString()\n      const data = clusters[clust_name].jstree_go_data\n      const state = {\n        data:{\n          core:{\n            data:data\n          }\n        }\n      }\n      showDetails(state);\n      setSubnetTitle(clust_name);\n    }\n  }\n  function clusterButton(cluster) {\n    return(\n    <button onClick={ () => {getDetails(cluster); updateCyState(cluster)}}>Cluster#{ cluster }</button>\n    );\n  }\n  return(\n    <Container  fixed>\n    <Grid container>\n      <h1>Proteome wide PPI network with alternative proteins</h1>\n      <p>This page allows the exploration of results derived  from the re-analysis of raw AP-MS data from the <a href=\"https://bioplex.hms.harvard.edu/\">BioPlex 2.0</a> using proteome annotations  provided by <a href=\"https://openprot.org\">OpenProt</a>. For more details on methodology and results see <a href=\"https://www.biorxiv.org/content/10.1101/2020.12.02.406710v2\">our pre-print</a>. For data and code for this page see <a href=\"https://github.com/Seb-Leb/ppi_explorer\">github</a>.</p>\n    </Grid>\n    <Grid container style={{ backgroundColor: '#ffff' }}>\n      <Grid item xs={3}>\n        <div>Search gene or function</div>\n        <form className=\"search\">\n          <input type=\"text\" value={query} onChange={onSearch} />\n        </form>\n        <ul className=\"nodes\">\n        {nodeResults.map(node => {\n          const { node_label, cluster, node_type } = node;\n          var cluster_button = \"\"\n          if (Number.isInteger(cluster)) {\n            cluster_button = clusterButton(cluster)\n          } else {\n            cluster_button = ''\n          }\n          return (\n            <ul className=\"node-meta\">\n              <div className=\"degree-circle\">{node_attrs[node_label].degree}</div>\n              <button className={ node_type } onClick={ () => {getDetails(node_label); secondNeighb(node_label)}}>{ node_label }</button>\n              {cluster_button}\n            </ul>\n          )\n        })}\n        </ul>\n      </Grid>\n      <Grid item xs={9}>\n        <Grid container>\n          <Grid item xs={4}>{ subnetTitle }</Grid>\n          <Grid item xs={2}>{ OPlink }</Grid>\n          <Grid item xs={6} align={\"right\"}>\n            <span className=\"dot ref-bait\"></span> refProt bait, <span></span>\n            <span className=\"dot ref-prey\"></span> refProt prey, <span></span>\n            <span className=\"dot alt-prey\"></span> altProt prey\n          </Grid>\n        </Grid>\n        <SubnetDisplay state={ cyState } OPlinkfun={ setOPlink }/>\n        <div>Gene Ontology</div>\n        <TreeView treeData={ details.data }/>\n      </Grid>\n    </Grid>\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}